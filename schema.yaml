openapi: 3.0.3
info:
  title: Beckings API
  version: 0.1.0
paths:
  /api/login/:
    post:
      operationId: api_login_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenLogin'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenLogin'
          description: ''
  /api/products/:
    get:
      operationId: api_products_list
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: api_products_create
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    get:
      operationId: api_products_retrieve
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_products_update
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_products_partial_update
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_products_destroy
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_users_create
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/users/me/:
    get:
      operationId: api_users_me_retrieve
      description: |-
        Abstract base class for generic types.

        On Python 3.12 and newer, generic classes implicitly inherit from
        Generic when they declare a parameter list after the class's name::

            class Mapping[KT, VT]:
                def __getitem__(self, key: KT) -> VT:
                    ...
                # Etc.

        On older versions of Python, however, generic classes have to
        explicitly inherit from Generic.

        After a class has been declared to be generic, it can then be used as
        follows::

            def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
                try:
                    return mapping[key]
                except KeyError:
                    return default
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    PatchedProduct:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        product_name:
          type: string
          maxLength: 100
        product_description:
          type: string
          nullable: true
        price:
          type: number
          format: double
        active:
          type: boolean
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
    Product:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        product_name:
          type: string
          maxLength: 100
        product_description:
          type: string
          nullable: true
        price:
          type: number
          format: double
        active:
          type: boolean
      required:
      - pk
      - product_name
    TokenLogin:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - login
      - password
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
